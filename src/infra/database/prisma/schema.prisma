generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  OWNER
  MEMBER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      Role     @default(MEMBER)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Parameter {
  id            String   @id @default(uuid())
  name          String
  offset        Float
  factor        Float
  unitOfMeasure String   @map("unit_of_measure")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  stationParameter StationParameter[] @relation("parameter")

  @@map("parameters")
}

model Station {
  id        String   @id @default(cuid())
  name      String
  uid       String   @unique
  address   String
  latitude  Float
  longitude Float
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stationParameter StationParameter[] @relation("station")

  @@map("stations")
}

model StationParameter {
  id          String    @id @default(cuid())
  stationId   String    @map("station_id")
  parameterId String    @map("parameter_id")
  station     Station   @relation("station", fields: [stationId], references: [id], onDelete: Cascade)
  parameter   Parameter @relation("parameter", fields: [parameterId], references: [id], onDelete: Cascade)

  measure Measure[] @relation("stationParameter")
  alarms  Alarm[]
  Alert   Alert[]

  @@map("station_parameters")
}

model Measure {
  id                 String   @id @default(cuid())
  stationParameterId String   @map("station_parameter_id")
  unitOfMeasure      String   @map("unit_of_measure")
  value              Int
  createdAt          DateTime @default(now()) @map("created_at")

  stationParameter StationParameter @relation("stationParameter", fields: [stationParameterId], references: [id])

  @@map("measure")
}

enum Operation {
  EQUAL
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
}

enum AlertLevel {
  WARNING
  CRITICAL
}

model Alarm {
  id                 String     @id @default(cuid())
  message            String
  value              Float
  operation          Operation
  level              AlertLevel
  stationParameterId String     @map("station_parameter_id")
  isActive           Boolean    @default(true) @map("is_active")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")

  alert            Alert[]          @relation("alarm")
  StationParameter StationParameter @relation(fields: [stationParameterId], references: [id])

  @@map("alarms")
}

model Alert {
  id                 String   @id @default(cuid())
  measurementValue   Float    @map("measurement_value")
  alarmId            String   @map("alarm_id")
  stationParameterId String   @map("station_parameter_id")
  isRead             Boolean  @default(false) @map("is_read")
  createdAt          DateTime @default(now()) @map("created_at")

  alarm            Alarm            @relation("alarm", fields: [alarmId], references: [id])
  stationParameter StationParameter @relation(fields: [stationParameterId], references: [id])

  @@map("alerts")
}
