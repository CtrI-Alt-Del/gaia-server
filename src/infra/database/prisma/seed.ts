import { $Enums, PrismaClient } from '@prisma/client'

import { UsersFaker } from '@/core/membership/domain/entities/fakers'
import { StationsFaker } from '@/core/telemetry/domain/entities/fakers/station-faker'
import { ParameterFaker } from '@/core/telemetry/domain/entities/fakers/parameter-faker'
import { PrismaUserMapper, PrismaParameterMapper } from './mappers'
import { AlarmFaker } from '@/core/alerting/domain/entities/fakers/alarm-faker'

export async function seed() {
  const prisma = new PrismaClient({
    log: process.env.LOG_LEVEL === 'debug' ? ['warn', 'error', 'info'] : [],
  })

  try {
    console.log('üå± Iniciando seed do banco de dados...')

    await prisma.$connect()
    console.log('‚úÖ Conectado ao banco de dados')

    console.log('üßπ Limpando dados existentes...')

    await prisma.stationParameter.deleteMany()
    console.log('‚úÖ StationParameters removidos')

    await prisma.station.deleteMany()
    console.log('‚úÖ Stations removidas')

    await prisma.alarm.deleteMany()
    console.log('‚úÖ Alarms removidos')

    await prisma.parameter.deleteMany()
    console.log('‚úÖ Parameters removidos')

    await prisma.user.deleteMany()
    console.log('‚úÖ Users removidos')

    console.log('‚úÖ Limpeza conclu√≠da!')

    const ownerUser = UsersFaker.fake({
      id: 'cmfyf7bbs0000civ25oavg5er',
      name: 'Diogo Braquinho',
      email: 'gaia.ctrlaltdel@gmail.com',
      role: 'owner',
    })
    const membersUsers = UsersFaker.fakeMany(100, { role: 'member' })
    const users = [ownerUser, ...membersUsers]
    const prismaUsers = users.map(PrismaUserMapper.toPrisma)

    await prisma.user.createMany({
      data: prismaUsers,
      skipDuplicates: true,
    })

    console.log(`‚úÖ ${users.length} usu√°rios adicionados com sucesso!`)

    const parameters = ParameterFaker.fakeMany(50)
    const prismaParameters = parameters.map(PrismaParameterMapper.toPrisma)

    await prisma.parameter.createMany({
      data: prismaParameters,
      skipDuplicates: true,
    })

    console.log(`‚úÖ ${parameters.length} par√¢metros adicionados com sucesso!`)

    const stations = StationsFaker.fakeMany(1000)

    for (const station of stations) {
      const stationData = {
        id: station.id.value,
        name: station.name.value,
        uid: station.uid.value.value,
        address: station.address.value,
        latitude: station.coordinate.latitude.value,
        longitude: station.coordinate.longitude.value,
        isActive: station.isActive.value,
        createdAt: station.createdAt.value,
        updatedAt: station.updatedAt?.value,
      }

      await prisma.station.create({
        data: stationData,
      })

      const randomParameters = parameters.slice(0, Math.floor(Math.random() * 5) + 1)

      for (const parameter of randomParameters) {
        await prisma.stationParameter.create({
          data: {
            stationId: station.id.value,
            parameterId: parameter.id.value,
          },
        })
      }
    }

    console.log(`‚úÖ ${stations.length} stations adicionadas com sucesso!`)

    const alarms = AlarmFaker.fakeMany(100)

    for (const alarm of alarms) {
      const alarmData = {
        level: alarm.level.toString(),
        message: alarm.message.value,
        operation: alarm.rule.operation.toString() as $Enums.Operation,
        value: alarm.rule.threshold.value,
        parameter: {
          connect: {
            id: parameters[Math.floor(Math.random() * parameters.length)].id.value,
          },
        },
      }

      await prisma.alarm.create({
        data: alarmData,
      })
    }

    console.log(`‚úÖ ${alarms.length} alarmes adicionados com sucesso!`)
  } catch (error) {
    console.error('‚ùå Erro durante o seed:', error)
  } finally {
    await prisma.$disconnect()
  }
}
